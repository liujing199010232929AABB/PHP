1. 传统的HTTP请求是什么样子的?
    (1). 一次HTTP请求对应一个页面;
    (2). 如果想在当前页面中发现请的http请求,页不跳转当前页面,就必须需要一个请求代理;
    (3). 这个请求代理,代理了用户的请求,向服务器发出新的http请求;
    (4). 而这个代理,我们可以用一段 javascript代码来完成,由js来发出http请求;
    (5). 等js收到服务器端响应的数据后,再由js来刷新页面更新数据;
    (6). 这时,给用户的感觉就是我仍停留在当前页面,而页面上的数据却在不停的更新中,用户体验超级棒;
    (7). 这个代理用户发出http请求的js代码,宏观上也可以叫作客户端,因为任何能发起请求的实体都可以视为客户端;

-----------------------------------------------------------------------------------------

2. Ajax 是什么?
    (1). Ajax 就是刚才我们所说的那个代理用户发起http访问请求的js代码;
    (2). Ajax 的全称是: Asynchronous JavaScript and XML[异步的 JavaScript 和 XML];
    (3). 之前交互用xml格式比较多,现在json格式是主流,因为xml太臃肿了,我们就不再学习了;
    (4). 同步与异步的区别:
        [1].同步是指客户端与服务器端处理的是同一个请求,服务器响应成功,客户端也接收到返回的数据,这个请求才算完成;
        [2].异步是指客户端与服务器可以同时处理不同的请求,客户端通过事件监听判断服务器端是否响应成功并返回数据;
    (5). Ajax 是目前最主流的异步请求方式,得到了几乎所有的主流浏览器的支持,包括IE在内.

-----------------------------------------------------------------------------------------

3. Ajax 的主要应用场景?
    (1). 表单验证;
    (2). 数据实时更新,例如股票行情;
    (3). 在线地图;
    (4). 其它需要数据实时加载,无刷新的使用场景.

4. Ajax 中常用的属性和方法
    (1). 对象: XMLHttpRequest() 简称 xhr对象;
    (2). 事件: onreadystatechange() 监听就绪状态属性的变化;
    (3). 属性: readyState 请求状态值,有四个值,我们只对数据就绪状态的值:4感兴趣;
    (4). 属性: status 请求状态码, 返回 200 时,表示已从服务器上成功的获取到了返回的文本;
    (5). 属性: responseText, 从服务器端返回的文本内容;
    (5). 方法: open('请求类型','请求的url',请求方式,默认为true异步):设置请求参数
    (6). 方法: send(): 发送请求,GET请求请填上参数null;
    (7). 方法: 如果是post请求,需要设置一下请求头信息,请文档类型重置:
         setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

5. 基本代码的结构:
